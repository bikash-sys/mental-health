"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { ArrowLeft, Send, Bot, User, Globe, Heart, Shield, Clock, Lightbulb, Phone } from "lucide-react"
import Link from "next/link"

interface Message {
  id: string
  content: string
  sender: "user" | "ai"
  timestamp: Date
  language?: string
}

const languages = [
  { code: "en", name: "English", flag: "ЁЯЗ║ЁЯЗ╕" },
  { code: "hi", name: "рд╣рд┐рдВрджреА", flag: "ЁЯЗоЁЯЗ│" },
  { code: "ur", name: "╪з╪▒╪п┘И", flag: "ЁЯЗ╡ЁЯЗ░" },
]

const quickResponses = {
  en: [
    "I'm feeling anxious about exams",
    "I can't sleep well lately",
    "I feel overwhelmed with studies",
    "I'm having trouble concentrating",
    "I feel isolated from friends",
  ],
  hi: [
    "рдореБрдЭреЗ рдкрд░реАрдХреНрд╖рд╛ рдХреА рдЪрд┐рдВрддрд╛ рд╣реЛ рд░рд╣реА рд╣реИ",
    "рдореБрдЭреЗ рд░рд╛рдд рдореЗрдВ рдиреАрдВрдж рдирд╣реАрдВ рдЖрддреА",
    "рдореИрдВ рдкрдврд╝рд╛рдИ рд╕реЗ рдкрд░реЗрд╢рд╛рди рд╣реВрдВ",
    "рдореБрдЭреЗ рдзреНрдпрд╛рди рд▓рдЧрд╛рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реИ",
    "рдореИрдВ рджреЛрд╕реНрддреЛрдВ рд╕реЗ рдЕрд▓рдЧ рдорд╣рд╕реВрд╕ рдХрд░рддрд╛ рд╣реВрдВ",
  ],
  ur: [
    "┘Е╪м┌╛█Т ╪з┘Е╪к╪н╪з┘Ж ┌й█М ┘Б┌й╪▒ █Б┘И ╪▒█Б█М █Б█Т",
    "┘Е╪м┌╛█Т ╪▒╪з╪к ┌й┘И ┘Ж█М┘Ж╪п ┘Ж█Б█М┌║ ╪в╪к█М",
    "┘Е█М┌║ ┘╛┌С┌╛╪з╪ж█М ╪│█Т ┘╛╪▒█М╪┤╪з┘Ж █Б┘И┌║",
    "┘Е╪м┌╛█Т ╪к┘И╪м█Б ┘Е╪▒┌й┘И╪▓ ┌й╪▒┘Ж█Т ┘Е█М┌║ ┘Е╪┤┌й┘Д █Б█Т",
    "┘Е█М┌║ ╪п┘И╪│╪к┘И┌║ ╪│█Т ╪з┘Д┌п ┘Е╪н╪│┘И╪│ ┌й╪▒╪к╪з █Б┘И┌║",
  ],
}

const aiResponses = {
  en: {
    greeting:
      "Hello! I'm your AI mental health companion. I'm here to listen and support you 24/7. How are you feeling today?",
    anxiety:
      "I understand you're feeling anxious about exams. This is very common among students, especially in J&K where academic pressure can be intense. Let's work through some breathing exercises together. Take a deep breath in for 4 counts, hold for 4, then exhale for 6. Remember, you're not alone in this.",
    sleep:
      "Sleep difficulties are often connected to stress and anxiety. Given the unique challenges students face in our region, this is quite common. Try establishing a bedtime routine: no screens 1 hour before bed, some light reading, or meditation. Would you like me to guide you through a relaxation technique?",
    overwhelmed:
      "Feeling overwhelmed with studies is something many students experience. In J&K, we understand the additional pressures you might face. Let's break down your tasks into smaller, manageable pieces. What's the most urgent thing you need to focus on right now?",
    concentration:
      "Difficulty concentrating can stem from stress, anxiety, or even trauma responses, which we know can affect students in our region. Try the Pomodoro technique: 25 minutes of focused study, then a 5-minute break. Also, ensure you're getting enough nutrition and water.",
    isolation:
      "Feeling isolated is particularly challenging, and I understand this might be amplified by the unique social dynamics in J&K. Remember that reaching out, like you're doing now, is a brave first step. Consider joining study groups or online communities with fellow students.",
  },
  hi: {
    greeting:
      "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ AI рдорд╛рдирд╕рд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╛рдереА рд╣реВрдВред рдореИрдВ 24/7 рдЖрдкрдХреА рдмрд╛рдд рд╕реБрдирдиреЗ рдФрд░ рд╕рд╣рд╛рдпрддрд╛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ рд╣реВрдВред рдЖрдЬ рдЖрдк рдХреИрд╕рд╛ рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ?",
    anxiety:
      "рдореИрдВ рд╕рдордЭ рд╕рдХрддрд╛ рд╣реВрдВ рдХрд┐ рдЖрдк рдкрд░реАрдХреНрд╖рд╛ рдХреЛ рд▓реЗрдХрд░ рдЪрд┐рдВрддрд┐рдд рд╣реИрдВред рдпрд╣ рдЫрд╛рддреНрд░реЛрдВ рдореЗрдВ рдмрд╣реБрдд рдЖрдо рд╣реИ, рдЦрд╛рд╕рдХрд░ J&K рдореЗрдВ рдЬрд╣рд╛рдВ рд╢реИрдХреНрд╖рдгрд┐рдХ рджрдмрд╛рд╡ рддреАрд╡реНрд░ рд╣реЛ рд╕рдХрддрд╛ рд╣реИред рдЖрдЗрдП рдХреБрдЫ рд╕рд╛рдВрд╕ рдХреА рддрдХрдиреАрдХреЛрдВ рдХрд╛ рдЕрднреНрдпрд╛рд╕ рдХрд░рддреЗ рд╣реИрдВред",
    sleep:
      "рдиреАрдВрдж рдХреА рд╕рдорд╕реНрдпрд╛рдПрдВ рдЕрдХреНрд╕рд░ рддрдирд╛рд╡ рдФрд░ рдЪрд┐рдВрддрд╛ рд╕реЗ рдЬреБрдбрд╝реА рд╣реЛрддреА рд╣реИрдВред рд╣рдорд╛рд░реЗ рдХреНрд╖реЗрддреНрд░ рдХреЗ рдЫрд╛рддреНрд░реЛрдВ рдХреЗ рд▓рд┐рдП рдпрд╣ рдХрд╛рдлреА рд╕рд╛рдорд╛рдиреНрдп рд╣реИред рд╕реЛрдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рдХреА рджрд┐рдирдЪрд░реНрдпрд╛ рдмрдирд╛рдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред",
    overwhelmed: "рдкрдврд╝рд╛рдИ рд╕реЗ рдЕрднрд┐рднреВрдд рдорд╣рд╕реВрд╕ рдХрд░рдирд╛ рдХрдИ рдЫрд╛рддреНрд░реЛрдВ рдХрд╛ рдЕрдиреБрднрд╡ рд╣реИред J&K рдореЗрдВ рд╣рдо рд╕рдордЭрддреЗ рд╣реИрдВ рдХрд┐ рдЖрдк рдкрд░ рдЕрддрд┐рд░рд┐рдХреНрдд рджрдмрд╛рд╡ рд╣реЛ рд╕рдХрддреЗ рд╣реИрдВред",
    concentration: "рдзреНрдпрд╛рди рдХреЗрдВрджреНрд░рд┐рдд рдХрд░рдиреЗ рдореЗрдВ рдХрдард┐рдирд╛рдИ рддрдирд╛рд╡, рдЪрд┐рдВрддрд╛ рдпрд╛ рдЖрдШрд╛рдд рдХреА рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рд╕реЗ рд╣реЛ рд╕рдХрддреА рд╣реИред рдкреЛрдореЛрдбреЛрд░реЛ рддрдХрдиреАрдХ рдЖрдЬрд╝рдорд╛рдПрдВред",
    isolation: "рдЕрдХреЗрд▓рд╛рдкрди рдорд╣рд╕реВрд╕ рдХрд░рдирд╛ рд╡рд┐рд╢реЗрд╖ рд░реВрдк рд╕реЗ рдЪреБрдиреМрддреАрдкреВрд░реНрдг рд╣реИред рдпрд╛рдж рд░рдЦреЗрдВ рдХрд┐ рдорджрдж рдорд╛рдВрдЧрдирд╛, рдЬреИрд╕рд╛ рдХрд┐ рдЖрдк рдХрд░ рд░рд╣реЗ рд╣реИрдВ, рдПрдХ рд╕рд╛рд╣рд╕рд┐рдХ рдХрджрдо рд╣реИред",
  },
  ur: {
    greeting:
      "╪з┘Д╪│┘Д╪з┘Е ╪╣┘Д█М┌й┘Е! ┘Е█М┌║ ╪в┘╛ ┌й╪з AI ╪░█Б┘Ж█М ╪╡╪н╪к ┌й╪з ╪│╪з╪к┌╛█М █Б┘И┌║█Ф ┘Е█М┌║ 24/7 ╪в┘╛ ┌й█М ╪и╪з╪к ╪│┘Ж┘Ж█Т ╪з┘И╪▒ ┘Е╪п╪п ┌й╪▒┘Ж█Т ┌й█Т ┘Д█М█Т █М█Б╪з┌║ █Б┘И┌║█Ф ╪в╪м ╪в┘╛ ┌й█М╪│╪з ┘Е╪н╪│┘И╪│ ┌й╪▒ ╪▒█Б█Т █Б█М┌║╪Я",
    anxiety:
      "┘Е█М┌║ ╪│┘Е╪м┌╛ ╪│┌й╪к╪з █Б┘И┌║ ┌й█Б ╪в┘╛ ╪з┘Е╪к╪н╪з┘Ж ┌й┘И ┘Д█Т ┌й╪▒ ┘╛╪▒█М╪┤╪з┘Ж █Б█М┌║█Ф █М█Б ╪╖┘Д╪и╪з╪б ┘Е█М┌║ ╪и█Б╪к ╪╣╪з┘Е █Б█Т╪М ╪о╪з╪╡ ╪╖┘И╪▒ ┘╛╪▒ J&K ┘Е█М┌║ ╪м█Б╪з┌║ ╪к╪╣┘Д█М┘Е█М ╪п╪и╪з╪д ╪┤╪п█М╪п █Б┘И ╪│┌й╪к╪з █Б█Т█Ф",
    sleep: "┘Ж█М┘Ж╪п ┌й█М ┘Е╪│╪з╪ж┘Д ╪з┌й╪л╪▒ ╪к┘Ж╪з╪д ╪з┘И╪▒ ┘╛╪▒█М╪┤╪з┘Ж█М ╪│█Т ╪м┌С█Т █Б┘И╪к█Т █Б█М┌║█Ф █Б┘Е╪з╪▒█Т ╪╣┘Д╪з┘В█Т ┌й█Т ╪╖┘Д╪и╪з╪б ┌й█Т ┘Д█М█Т █М█Б ┌й╪з┘Б█М ╪╣╪з┘Е █Б█Т█Ф",
    overwhelmed:
      "┘╛┌С┌╛╪з╪ж█М ╪│█Т ┘Е╪║┘Д┘И╪и ┘Е╪н╪│┘И╪│ ┌й╪▒┘Ж╪з ┌й╪ж█М ╪╖┘Д╪и╪з╪б ┌й╪з ╪к╪м╪▒╪и█Б █Б█Т█Ф J&K ┘Е█М┌║ █Б┘Е ╪│┘Е╪м┌╛╪к█Т █Б█М┌║ ┌й█Б ╪в┘╛ ┘╛╪▒ ╪з╪╢╪з┘Б█М ╪п╪и╪з╪д █Б┘И ╪│┌й╪к█Т █Б█М┌║█Ф",
    concentration: "╪к┘И╪м█Б ┘Е╪▒┌й┘И╪▓ ┌й╪▒┘Ж█Т ┘Е█М┌║ ╪п╪┤┘И╪з╪▒█М ╪к┘Ж╪з╪д╪М ┘╛╪▒█М╪┤╪з┘Ж█М █М╪з ╪╡╪п┘Е█Т ┌й█М ┘И╪з┌й┘Ж╪┤ ╪│█Т █Б┘И ╪│┌й╪к█М █Б█Т█Ф",
    isolation:
      "╪к┘Ж█Б╪з╪ж█М ┘Е╪н╪│┘И╪│ ┌й╪▒┘Ж╪з ╪о╪з╪╡ ╪╖┘И╪▒ ┘╛╪▒ ┘Е╪┤┌й┘Д █Б█Т█Ф █М╪з╪п ╪▒┌й┌╛█М┌║ ┌й█Б ┘Е╪п╪п ┘Е╪з┘Ж┌п┘Ж╪з╪М ╪м█М╪│╪з ┌й█Б ╪в┘╛ ┌й╪▒ ╪▒█Б█Т █Б█М┌║╪М ╪з█М┌й ╪и█Б╪з╪п╪▒█М ┌й╪з ┘В╪п┘Е █Б█Т█Ф",
  },
}

export default function ChatbotPage() {
  const [messages, setMessages] = useState<Message[]>([])
  const [inputMessage, setInputMessage] = useState("")
  const [selectedLanguage, setSelectedLanguage] = useState("en")
  const [isTyping, setIsTyping] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const inputRef = useRef<HTMLInputElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  useEffect(() => {
    // Initial greeting message
    const greeting: Message = {
      id: "1",
      content: aiResponses[selectedLanguage as keyof typeof aiResponses].greeting,
      sender: "ai",
      timestamp: new Date(),
      language: selectedLanguage,
    }
    setMessages([greeting])
  }, [selectedLanguage])

  const generateAIResponse = (userMessage: string): string => {
    const lowerMessage = userMessage.toLowerCase()
    const responses = aiResponses[selectedLanguage as keyof typeof aiResponses]

    if (
      lowerMessage.includes("anxious") ||
      lowerMessage.includes("anxiety") ||
      lowerMessage.includes("exam") ||
      lowerMessage.includes("рдЪрд┐рдВрддрд╛") ||
      lowerMessage.includes("┘Б┌й╪▒")
    ) {
      return responses.anxiety
    } else if (
      lowerMessage.includes("sleep") ||
      lowerMessage.includes("insomnia") ||
      lowerMessage.includes("рдиреАрдВрдж") ||
      lowerMessage.includes("┘Ж█М┘Ж╪п")
    ) {
      return responses.sleep
    } else if (
      lowerMessage.includes("overwhelmed") ||
      lowerMessage.includes("stress") ||
      lowerMessage.includes("рдЕрднрд┐рднреВрдд") ||
      lowerMessage.includes("┘Е╪║┘Д┘И╪и")
    ) {
      return responses.overwhelmed
    } else if (
      lowerMessage.includes("concentration") ||
      lowerMessage.includes("focus") ||
      lowerMessage.includes("рдзреНрдпрд╛рди") ||
      lowerMessage.includes("╪к┘И╪м█Б")
    ) {
      return responses.concentration
    } else if (
      lowerMessage.includes("isolated") ||
      lowerMessage.includes("lonely") ||
      lowerMessage.includes("рдЕрдХреЗрд▓рд╛") ||
      lowerMessage.includes("╪к┘Ж█Б╪з")
    ) {
      return responses.isolation
    } else {
      return selectedLanguage === "en"
        ? "I hear you, and I want you to know that your feelings are valid. Many students in J&K face similar challenges. Can you tell me more about what's troubling you? I'm here to listen and support you."
        : selectedLanguage === "hi"
          ? "рдореИрдВ рдЖрдкрдХреА рдмрд╛рдд рд╕реБрди рд░рд╣рд╛ рд╣реВрдВ, рдФрд░ рдореИрдВ рдЪрд╛рд╣рддрд╛ рд╣реВрдВ рдХрд┐ рдЖрдк рдЬрд╛рдиреЗрдВ рдХрд┐ рдЖрдкрдХреА рднрд╛рд╡рдирд╛рдПрдВ рд╡реИрдз рд╣реИрдВред J&K рдХреЗ рдХрдИ рдЫрд╛рддреНрд░ рд╕рдорд╛рди рдЪреБрдиреМрддрд┐рдпреЛрдВ рдХрд╛ рд╕рд╛рдордирд╛ рдХрд░рддреЗ рд╣реИрдВред рдХреНрдпрд╛ рдЖрдк рдореБрдЭреЗ рдмрддрд╛ рд╕рдХрддреЗ рд╣реИрдВ рдХрд┐ рдЖрдкрдХреЛ рдХреНрдпрд╛ рдкрд░реЗрд╢рд╛рди рдХрд░ рд░рд╣рд╛ рд╣реИ?"
          : "┘Е█М┌║ ╪в┘╛ ┌й█М ╪и╪з╪к ╪│┘Ж ╪▒█Б╪з █Б┘И┌║╪М ╪з┘И╪▒ ┘Е█М┌║ ┌Ж╪з█Б╪к╪з █Б┘И┌║ ┌й█Б ╪в┘╛ ╪м╪з┘Ж█М┌║ ┌й█Б ╪в┘╛ ┌й█Т ╪м╪░╪и╪з╪к ╪п╪▒╪│╪к █Б█М┌║█Ф J&K ┌й█Т ┌й╪ж█М ╪╖┘Д╪и╪з╪б ╪з╪│█М ╪╖╪▒╪н ┌й█Т ┘Е╪│╪з╪ж┘Д ┌й╪з ╪│╪з┘Е┘Ж╪з ┌й╪▒╪к█Т █Б█М┌║█Ф ┌й█М╪з ╪в┘╛ ┘Е╪м┌╛█Т ╪и╪к╪з ╪│┌й╪к█Т █Б█М┌║ ┌й█Б ╪в┘╛ ┌й┘И ┌й█М╪з ┘╛╪▒█М╪┤╪з┘Ж ┌й╪▒ ╪▒█Б╪з █Б█Т╪Я"
    }
  }

  const sendMessage = async (content: string) => {
    if (!content.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      content: content.trim(),
      sender: "user",
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInputMessage("")
    setIsTyping(true)

    // Simulate AI thinking time
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        content: generateAIResponse(content),
        sender: "ai",
        timestamp: new Date(),
        language: selectedLanguage,
      }
      setMessages((prev) => [...prev, aiResponse])
      setIsTyping(false)
    }, 1500)
  }

  const handleQuickResponse = (response: string) => {
    sendMessage(response)
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      sendMessage(inputMessage)
    }
  }

  return (
    <div className="min-h-screen bg-background flex flex-col">
      {/* Header */}
      <header className="border-b bg-card/50 backdrop-blur-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/" className="flex items-center gap-2 text-foreground hover:text-primary transition-colors">
              <ArrowLeft className="w-4 h-4" />
              <span>Back to Home</span>
            </Link>
            <div className="flex items-center gap-4">
              <Badge variant="secondary" className="flex items-center gap-2">
                <Clock className="w-3 h-3" />
                24/7 Available
              </Badge>
              <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>
                <SelectTrigger className="w-32">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {languages.map((lang) => (
                    <SelectItem key={lang.code} value={lang.code}>
                      <span className="flex items-center gap-2">
                        <span>{lang.flag}</span>
                        <span>{lang.name}</span>
                      </span>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        </div>
      </header>

      {/* Chat Interface */}
      <div className="flex-1 flex flex-col max-w-4xl mx-auto w-full">
        {/* Chat Header */}
        <div className="p-6 border-b bg-card/30">
          <div className="flex items-center gap-4">
            <div className="w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center">
              <Bot className="w-6 h-6 text-primary" />
            </div>
            <div>
              <h1 className="text-xl font-semibold">AI Mental Health Companion</h1>
              <p className="text-muted-foreground flex items-center gap-2">
                <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                Online тАв Culturally Sensitive Support for J&K Students
              </p>
            </div>
          </div>
        </div>

        {/* Messages */}
        <ScrollArea className="flex-1 p-4">
          <div className="space-y-4 max-w-3xl mx-auto">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex gap-3 ${message.sender === "user" ? "justify-end" : "justify-start"}`}
              >
                {message.sender === "ai" && (
                  <div className="w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0">
                    <Bot className="w-4 h-4 text-primary" />
                  </div>
                )}
                <div
                  className={`max-w-[80%] rounded-lg px-4 py-3 ${
                    message.sender === "user" ? "bg-primary text-primary-foreground" : "bg-card border"
                  }`}
                >
                  <p className="text-sm leading-relaxed">{message.content}</p>
                  <p className="text-xs opacity-70 mt-2">
                    {message.timestamp.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
                  </p>
                </div>
                {message.sender === "user" && (
                  <div className="w-8 h-8 bg-secondary/10 rounded-full flex items-center justify-center flex-shrink-0">
                    <User className="w-4 h-4 text-secondary" />
                  </div>
                )}
              </div>
            ))}

            {isTyping && (
              <div className="flex gap-3 justify-start">
                <div className="w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0">
                  <Bot className="w-4 h-4 text-primary" />
                </div>
                <div className="bg-card border rounded-lg px-4 py-3">
                  <div className="flex gap-1">
                    <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce"></div>
                    <div
                      className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce"
                      style={{ animationDelay: "0.1s" }}
                    ></div>
                    <div
                      className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce"
                      style={{ animationDelay: "0.2s" }}
                    ></div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
        </ScrollArea>

        {/* Quick Responses */}
        {messages.length <= 1 && (
          <div className="p-4 border-t bg-muted/30">
            <div className="max-w-3xl mx-auto">
              <p className="text-sm text-muted-foreground mb-3">Quick responses:</p>
              <div className="flex flex-wrap gap-2">
                {quickResponses[selectedLanguage as keyof typeof quickResponses].map((response, index) => (
                  <Button
                    key={index}
                    variant="outline"
                    size="sm"
                    onClick={() => handleQuickResponse(response)}
                    className="text-xs"
                  >
                    {response}
                  </Button>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Input Area */}
        <div className="p-4 border-t bg-card/50">
          <div className="max-w-3xl mx-auto">
            <div className="flex gap-2">
              <Input
                ref={inputRef}
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder={
                  selectedLanguage === "en"
                    ? "Type your message here..."
                    : selectedLanguage === "hi"
                      ? "рдпрд╣рд╛рдБ рдЕрдкрдирд╛ рд╕рдВрджреЗрд╢ рд▓рд┐рдЦреЗрдВ..."
                      : "█М█Б╪з┌║ ╪з┘╛┘Ж╪з ┘╛█М╪║╪з┘Е ┘Д┌й┌╛█М┌║..."
                }
                className="flex-1"
                disabled={isTyping}
              />
              <Button onClick={() => sendMessage(inputMessage)} disabled={!inputMessage.trim() || isTyping} size="icon">
                <Send className="w-4 h-4" />
              </Button>
            </div>

            {/* Safety Features */}
            <div className="flex items-center justify-between mt-3 text-xs text-muted-foreground">
              <div className="flex items-center gap-4">
                <span className="flex items-center gap-1">
                  <Shield className="w-3 h-3" />
                  End-to-end encrypted
                </span>
                <span className="flex items-center gap-1">
                  <Heart className="w-3 h-3" />
                  Culturally sensitive
                </span>
                <span className="flex items-center gap-1">
                  <Globe className="w-3 h-3" />
                  Multilingual support
                </span>
              </div>
              <Button variant="ghost" size="sm" className="text-xs h-auto p-1">
                <Phone className="w-3 h-3 mr-1" />
                Crisis Helpline
              </Button>
            </div>
          </div>
        </div>
      </div>

      {/* Emergency Resources Sidebar */}
      <div className="hidden lg:block fixed right-4 top-1/2 transform -translate-y-1/2 w-64">
        <Card className="border-2 border-orange-200 bg-orange-50/50">
          <CardHeader className="pb-3">
            <CardTitle className="text-sm flex items-center gap-2">
              <Lightbulb className="w-4 h-4 text-orange-600" />
              Emergency Resources
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="text-xs">
              <p className="font-medium text-orange-800 mb-1">Crisis Helplines:</p>
              <p>National: 1800-599-0019</p>
              <p>J&K: 0194-2440033</p>
            </div>
            <div className="text-xs">
              <p className="font-medium text-orange-800 mb-1">If you're in immediate danger:</p>
              <p>Call emergency services: 112</p>
            </div>
            <Button size="sm" variant="outline" className="w-full text-xs bg-transparent">
              Find Local Support
            </Button>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
